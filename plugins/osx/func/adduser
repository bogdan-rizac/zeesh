#!/usr/bin/env zsh

version="2.0.2"
cmdname=$0

# The script must be run as an admin user
if [[ -z $(/usr/bin/id -p $USER | grep admin) ]]; then
    echo "You must be an administrative user with sudo privileges in order to run $cmdname"
    return
fi

# set -x

# Obtained and modified from a bash shell script available at
# http://www.osxfaq.com/tips/unix-tricks/week91/friday.ws
# For 10.5:  Eliminated niutil commands in favor of Directory Service

# Create a user.
# Takes the user's username, fullname, uid, and staff|admin
# and creates:
#   a new user in Directory Service passwd
#   a new /Users/username home directory
declare username realname uid accnt  # to hold the given username and realname names, uid, and account type
declare str                            # working

usage() {
  echo "Usage:"
  echo "  $cmdname username realname (staff|admin)"
  if [[ "$*" != "" ]]; then
      echo
      echo "Error: $*"
  fi
  return 1
}

# Check parameters
if [[ $# -ne 4 ]]; then
    usage
    return 1
fi

username="$1"; realname="$2"; accnt="$4"
last_id=`dscl . -list /Users UniqueID | awk '{print $2}' | sort -n | tail -1`
uid=$((last_id + 1))
group=${username}

# check that the user id is numeric
if [[ -z "$(echo $uid | egrep "^[[:digit:]]+$")" ]]; then
    usage "User ID must be numeric"
    return 1
fi

# check that the users does not already have a home directory
if [[ -e /Users/$username ]]; then
    usage "User $username already exists at /Users/$username"
    return 11
fi

# search Directory Service for the given user - it should not exist
str="$(dscl . -list /Users  |  grep -w $username )"
if [[ $username == $str ]];then
    usage "User $username already exists (but does not have a home directory)"
    return 21
fi

# search Directory Service for the given uid - it should not exist
# str="$(nireport . /users uid | grep -w $uid)"
str="$(dscl . -list /Users UniqueID | awk '{print $2}'  | grep -w $uid)"
if [[ ! -z "$str" ]]; then
  usage "User ID $uid already exists"
  return 31
fi

# search Directory Service for the given group - it should not exist
# str="$(nifind /groups/$group .)"
str="$( dscl . -list /Groups | grep -w $group )"
if [[ ! -z "$str" ]]; then
    usage "Group $group already exists"
    return 41
fi

# search Directory Service for the given gid - it should not exist
#str="$(nireport . /groups gid | grep -w $uid)"
str="$( dscl . -list /Users PrimaryGroupID | awk '{print $2}'  | grep -w $uid)"
if [[ ! -z "$str" ]]; then
    usage "Group ID $uid already exists"
  return 1
fi

# ensure either staff or admin is given
if [[ $4 != staff ]] && [[ $4 != admin ]]; then
  usage "Give account type as 'staff' or 'admin'"
  return 1
fi

# Add the new user to Directory Service
sudo dscl . create /users/$username
sudo dscl . create /users/$username name $username
sudo dscl . create /users/$username passwd "*"
sudo dscl . create /users/$username hint ""
sudo dscl . create /users/$username uid $uid
sudo dscl . create /users/$username gid $uid
sudo dscl . create /users/$username home /Users/$username
sudo dscl . create /users/$username shell /bin/zsh
sudo dscl . create /users/$username realname "$realname"
sudo dscl . create /users/$username picture "/Library/User Pictures/Fun/Gingerbread Man.tif"
sudo dscl . create /users/$username sharedDir Public

# add some other properties that are usually in Directory Service
sudo  dscl . create /users/$username _shadow_passwd ""
# dscl . create /users/$username _writers_hint $username
# dscl . create /users/$username _writers_real_name $username

# add the new group
sudo  dscl . create /groups/$username
sudo  dscl . create /groups/$username name $username
sudo  dscl . create /groups/$username passwd "*"
sudo  dscl . create /groups/$username gid $uid

echo "New user and group $username created for $realname"

# Add admin users to the admin group
if [[ $4 = admin ]]; then
  sudo  dscl . merge /groups/admin users $username
  sudo  dscl . merge /groups/appserverusr users $username
  sudo  dscl . merge /groups/appserveradm users $username
  echo "User $username added to groups admin, appserverusr, appserveradm"
fi

# Create the home directory, populate from the template, and set owners
sudo  mkdir /Users/$username
if [[ ! -d /Users/$username ]]; then
  echo "Unable to create the user's home directory /Users/$username"
  return
fi

# Test for a /Users/Template account, and use that, or in its absence, the
# default factory-supplied template, to create the new user's subdirectories
# but don't create a problem if this is used to create the Template account
if [[ -d /Users/Template && $username != Template ]];then
    sudo ditto -rsrc /Users/Template/ /Users/$username
    echo "Home directory /Users/$username created and populated from /Users/Template"
else
    sudo ditto -rsrc /System/Library/User\ Template/English.lproj/ /Users/$username
    echo "Home directory /Users/$username created and populated from /System/Library/User\ Template"
fi

sudo chown -R ${username}:$username /Users/$username

# Now give the user a password
echo "A password for this account must be given, it is currently blank"
sudo passwd $username

return 0
